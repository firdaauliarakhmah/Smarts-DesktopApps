/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package beasiswaku;

import java.awt.Frame;
import java.util.List;
import javax.swing.table.DefaultTableModel;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.text.html.parser.Entity;

/**
 *
 * @author Fida
 */
public class SPK extends javax.swing.JFrame {

    int alternatifID;
    alternatif altf;

    /**
     * Creates new form SPK
     */
    public SPK() {
        initComponents();
        setLocationRelativeTo(null);
//        setExtendedState(Frame.MAXIMIZED_BOTH);
        loadAlternatif("");
        loadKriteria("");
        //Normalisasi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pb = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblKriteria = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnTambah = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAlternatif = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        pembobotan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        hslPembobotan = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        btnBobot = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblBobotku = new javax.swing.JTable();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(873, 70));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("THE BEST SCHOLARSHIP PLATFORM");
        jLabel2.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setPreferredSize(new java.awt.Dimension(873, 70));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        tblKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblKriteria);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pb.addTab("Kriteria", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(873, 50));

        btnTambah.setBackground(new java.awt.Color(153, 204, 255));
        btnTambah.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTambah.setForeground(new java.awt.Color(51, 51, 51));
        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(153, 204, 255));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(51, 51, 51));
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(153, 204, 255));
        btnHapus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnHapus.setForeground(new java.awt.Color(51, 51, 51));
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCariKeyReleased(evt);
            }
        });

        btnCari.setBackground(new java.awt.Color(153, 204, 255));
        btnCari.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCari.setForeground(new java.awt.Color(51, 51, 51));
        btnCari.setText("Cari");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCari)
                .addGap(49, 49, 49))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah)
                    .addComponent(btnEdit)
                    .addComponent(btnHapus)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        tblAlternatif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAlternatif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAlternatifMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAlternatif);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        pb.addTab("Data Siswa", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(873, 50));

        pembobotan.setBackground(new java.awt.Color(153, 204, 255));
        pembobotan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pembobotan.setForeground(new java.awt.Color(51, 51, 51));
        pembobotan.setText("Mulai");
        pembobotan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pembobotanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(pembobotan, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(742, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(pembobotan)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        hslPembobotan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(hslPembobotan);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pb.addTab("Normalisasi", jPanel5);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel17.setPreferredSize(new java.awt.Dimension(873, 50));

        btnBobot.setBackground(new java.awt.Color(153, 204, 255));
        btnBobot.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBobot.setForeground(new java.awt.Color(51, 51, 51));
        btnBobot.setText("Mulai");
        btnBobot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBobotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnBobot, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(742, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnBobot)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel16.add(jPanel17, java.awt.BorderLayout.PAGE_START);

        tblBobotku.setAutoCreateRowSorter(true);
        tblBobotku.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblBobotku);

        jPanel16.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        pb.addTab("Preferensi", jPanel16);

        getContentPane().add(pb, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pembobotanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pembobotanActionPerformed
        // TODO add your handling code here:
        Normalisasi();
    }//GEN-LAST:event_pembobotanActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        AddAlternatif a = new AddAlternatif(this, true);
        a.setVisible(true);
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            if (alternatifID > 0) {
                AeditAlternatif edit = new AeditAlternatif(this, true);
                edit.alt = altf;
                edit.setVisible(true);
            }

//          System.out.println(alternatifID);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        if (alternatifID > 0) {
            try {
                int option = JOptionPane.showOptionDialog(this, "Do want to delete this data?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, 0);
                if (option == 0) {
                    Connection koneksi = Koneksi.konekKeDB();
                    Statement st = koneksi.createStatement();
                    String sql = "DELETE FROM alternatif WHERE id_siswa='" + alternatifID + "'";
                    st.executeUpdate(sql);
//                    loadAlternatif();
                    loadAlternatif("");
                    JOptionPane.showMessageDialog(this, "Delete data succes");
                }
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "Data doesn't exists");
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tblAlternatifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAlternatifMouseClicked
        int i = tblAlternatif.getSelectedRow();
        if (i != -1) {
            String id = tblAlternatif.getValueAt(i, 0).toString();
            int TheID = Integer.parseInt(id);
            alternatifID = TheID;

            String nisn = tblAlternatif.getValueAt(i, 1).toString();
            String nama = tblAlternatif.getValueAt(i, 2).toString();
            String tl = tblAlternatif.getValueAt(i, 3).toString();
            String tgl = tblAlternatif.getValueAt(i, 4).toString();
            String jk = tblAlternatif.getValueAt(i, 5).toString();
            String almt = tblAlternatif.getValueAt(i, 6).toString();
            String eml = tblAlternatif.getValueAt(i, 7).toString();
            String no = tblAlternatif.getValueAt(i, 8).toString();
            String rr = tblAlternatif.getValueAt(i, 9).toString();
            String po = tblAlternatif.getValueAt(i, 10).toString();
            String or = tblAlternatif.getValueAt(i, 11).toString();
            String sf = tblAlternatif.getValueAt(i, 12).toString();
            String to = tblAlternatif.getValueAt(i, 13).toString();

            altf = new alternatif();
            altf.setId_siswa(id);
            altf.setNisn(nisn);
            altf.setNama(nama);
            altf.setTempat_lahir(tl);
            altf.setTanggal_lahir(tgl);
            altf.setJk(jk);
            altf.setAlamat(almt);
            altf.setEmail(eml);
            altf.setNo_hp(no);
            altf.setRaport(rr);
            altf.setPenghasilan_ortu(po);
            altf.setOrganisasi(or);
            altf.setSertif(sf);
            altf.setTanggungan_ortu(to);

        }
    }//GEN-LAST:event_tblAlternatifMouseClicked

    private void btnBobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBobotActionPerformed
        // TODO add your handling code here:
        TruncateTbl("hasil");
        SPK_SAW();
    }//GEN-LAST:event_btnBobotActionPerformed

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed

    }//GEN-LAST:event_txtCariActionPerformed

    private void txtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyReleased
        String key = txtCari.getText();
//        String kriteria = " WHERE "
//                + "nama LIKE '%" + key + "%' OR "
//                + "bobot LIKE '%" + key + "%' OR "
//                + "atribut LIKE '%" + key + "%' OR "
//                + "id_kriteria LIKE '%" + key + "%'";
        
        String alternatif = " WHERE "
                + "nisn LIKE '%" + key + "%' OR "
                + "nama LIKE '%" + key + "%' OR "
                + "tempat_lahir LIKE '%" + key + "%' OR "
                + "tanggal_lahir LIKE '%" + key + "%' OR "
                + "jk LIKE '%" + key + "%' OR "
                + "alamat LIKE '%" + key + "%' OR "
                + "email LIKE '%" + key + "%' OR "
                + "no_hp LIKE '%" + key + "%' OR "
                + "raport LIKE '%" + key + "%' OR "
                + "penghasilan_ortu LIKE '%" + key + "%' OR "
                + "organisasi LIKE '%" + key + "%' OR "
                + "sertif LIKE '%" + key + "%' OR "
                + "tanggungan_ortu LIKE '%" + key + "%' OR "
                + "id_siswa LIKE '%" + key + "%'";
        
        loadAlternatif(alternatif);
//        loadKriteria(kriteria);
    }//GEN-LAST:event_txtCariKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SPK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBobot;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnTambah;
    private javax.swing.JTable hslPembobotan;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane pb;
    private javax.swing.JButton pembobotan;
    public static javax.swing.JTable tblAlternatif;
    private javax.swing.JTable tblBobotku;
    private javax.swing.JTable tblKriteria;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables

    //load kriteria
    private void loadKriteria(String where) {
        try {
            Object[][] data = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tblKriteria.setModel(model);

            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM kriteria" + where;
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_kriteria");
                String nama = rs.getString("nama");
                String bobot = rs.getString("bobot");
                String label = rs.getString("label");
                Object[] d = {id, nama, bobot, label};
                model.addRow(d);
            } koneksi.close();
        } catch (Exception e) {

        }
    }

    //load alternatif 
    public static void loadAlternatif(String where) {
        try {
            Object[][] data = null;
            Object[] header = {"ID", "NISN", "NAMA", "TEMPAT LAHIR", "TANGGAL LAHIR", "JENIS KELAMIN", "ALAMAT", "EMAIL", "NO HP", "RATA RATA RAPORT", "PENGHASILAN ORANGTUA", "KEAKTIFAN ORGANISASI", "JUMLAH SERTIFIKAT", "TANGGUNGAN ORANGTUA"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tblAlternatif.setModel(model);
//            int nomor = 0;

            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM alternatif" + where;
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id_siswa = rs.getInt("id_siswa");
                String nisn = rs.getString("nisn");
                String nama = rs.getString("nama");
                String tl = rs.getString("tempat_lahir");
                String tgl = rs.getString("tanggal_lahir");
                String jk = rs.getString("jk");
                String almt = rs.getString("alamat");
                String eml = rs.getString("email");
                String no = rs.getString("no_hp");
                String rr = rs.getString("raport");
                String po = rs.getString("penghasilan_ortu");
                String or = rs.getString("organisasi");
                String sf = rs.getString("sertif");
                String to = rs.getString("tanggungan_ortu");

//                nomor++;

                Object[] d = {id_siswa, nisn, nama, tl, tgl, jk, almt, eml, no, rr, po, or, sf, to};
                model.addRow(d);
            }koneksi.close();
        } catch (Exception e) {

        }
    }

    private void SPK_SAW() {
        try {
            //List<Double> hasil_saw = new ArrayList<>();
//            Object[] header = {"NO", "ALTERNATIF", "PREFERENSI"};
//            Object[][] data = null;
//            DefaultTableModel model = new DefaultTableModel(data, header);
//            tblBobotku.setModel(model);
            int nomor = 0;

            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                double raport = rs.getDouble("raport");
                double penghasilan_ortu = rs.getDouble("penghasilan_ortu");
                double organisasi = rs.getDouble("organisasi");
                double sertif = rs.getDouble("sertif");
                double tanggungan_ortu = rs.getDouble("tanggungan_ortu");

                double pembagi_raport = label("raport").equals("cost") ? min("raport") : max("raport");
                double pembagi_penghasilan_ortu = label("penghasilan_ortu").equals("cost") ? min("penghasilan_ortu") : max("penghasilan_ortu");
                double pembagi_organisasi = label("organisasi").equals("cost") ? min("organisasi") : max("organisasi");
                double pembagi_sertif = label("sertif").equals("cost") ? min("sertif") : max("sertif");
                double pembagi_tanggungan_ortu = label("tanggungan_ortu").equals("cost") ? min("tanggungan_ortu") : max("tanggungan_ortu");

                double norm_raport = label("raport").equals("cost") ? min("raport") / raport : raport / max("raport");
                double norm_penghasilan_ortu = label("penghasilan_ortu").equals("cost") ? min("penghasilan_ortu") / penghasilan_ortu : penghasilan_ortu / max("penghasilan_ortu");
                double norm_organisasi = label("organisasi").equals("cost") ? min("organisasi") / organisasi : organisasi / max("organisasi");
                double norm_sertif = label("sertif").equals("cost") ? min("sertif") / sertif : sertif / max("sertif");
                double norm_tanggungan_ortu = label("tanggungan_ortu").equals("cost") ? min("tanggungan_ortu") / tanggungan_ortu : tanggungan_ortu / max("tanggungan_ortu");

                double hasil = (bobot("raport") * norm_raport) + (bobot("penghasilan_ortu") * norm_penghasilan_ortu) + (bobot("organisasi") * norm_organisasi) + (bobot("sertif") * norm_sertif) + (bobot("tanggungan_ortu") * norm_tanggungan_ortu);
                nomor++;

                String nama_alt = rs.getString("nama");
                Object[] rowData = {nomor, nama_alt, hasil};
//                model.addRow(rowData);
                
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                LocalDateTime now = LocalDateTime.now();

                Connection cy = Koneksi.konekKeDB();
                Statement st1 = cy.createStatement();
                String query1 = "INSERT INTO hasil VALUES(NULL,'" + nama_alt + "','" + dtf.format(now) + " ','" + hasil + "');";
                st1.executeUpdate(query1);
                hasilSPK();
                
            } c.close();
        } catch (Exception e) {
        }
    }

    private double min(String kolom) {
        double min = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MIN(" + kolom + ") AS min_kolom FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                min = rs.getDouble("min_kolom");
            }
            c.close();
            return min;

        } catch (SQLException e) {
        }
        return min;
    }

    private double max(String kolom) {
        double max = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MAX(" + kolom + ") AS max_kolom FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                max = rs.getDouble("max_kolom");
            }
            c.close();
            return max;

        } catch (SQLException e) {
        }
        return max;
    }

    private String label(String kolom) {
        String label = "cost";
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT label FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                label = rs.getString("label");
            }c.close();
            return label;

        } catch (SQLException e) {
        }
        return label;
    }

    private double bobot(String kolom) {
        double bobot = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT bobot FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                bobot = rs.getDouble("bobot");
            }c.close();
            return bobot;

        } catch (SQLException e) {
        }
        return bobot;
    }

    private void Normalisasi() {
        try {
            //List<Double> hasil_saw = new ArrayList<>();
            Object[] header = {"NO", "ALTERNATIF", "RATA-RATA RAPORT", "PENGHASILAN ORANGTUA", "NILAI ORGANISASI", "JUMLAH SERTIFIKAT", "TANGGUNGAN ORANGTUA"};
            Object[][] data = null;
            DefaultTableModel model = new DefaultTableModel(data, header);
            hslPembobotan.setModel(model);
            int nomor = 0;

            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                double raport = rs.getDouble("raport");
                double penghasilan_ortu = rs.getDouble("penghasilan_ortu");
                double organisasi = rs.getDouble("organisasi");
                double sertif = rs.getDouble("sertif");
                double tanggungan_ortu = rs.getDouble("tanggungan_ortu");

                double pembagi_raport = label("raport").equals("cost") ? min("raport") : max("raport");
                double pembagi_penghasilan_ortu = label("penghasilan_ortu").equals("cost") ? min("penghasilan_ortu") : max("penghasilan_ortu");
                double pembagi_organisasi = label("organisasi").equals("cost") ? min("organisasi") : max("organisasi");
                double pembagi_sertif = label("sertif").equals("cost") ? min("sertif") : max("sertif");
                double pembagi_tanggungan_ortu = label("tanggungan_ortu").equals("cost") ? min("tanggungan_ortu") : max("tanggungan_ortu");

                double norm_raport = label("raport").equals("cost") ? min("raport") / raport : raport / max("raport");
                double norm_penghasilan_ortu = label("penghasilan_ortu").equals("cost") ? min("penghasilan_ortu") / penghasilan_ortu : penghasilan_ortu / max("penghasilan_ortu");
                double norm_organisasi = label("organisasi").equals("cost") ? min("organisasi") / organisasi : organisasi / max("organisasi");
                double norm_sertif = label("sertif").equals("cost") ? min("sertif") / sertif : sertif / max("sertif");
                double norm_tanggungan_ortu = label("tanggungan_ortu").equals("cost") ? min("tanggungan_ortu") / tanggungan_ortu : tanggungan_ortu / max("tanggungan_ortu");

                nomor++;

                String nama_alt = rs.getString("nama");
                Object[] rowData = {nomor, nama_alt, norm_raport, norm_penghasilan_ortu, norm_organisasi, norm_sertif, norm_tanggungan_ortu};
                model.addRow(rowData);

            }c.close();
        } catch (Exception e) {
        }
    }
    
     private void TruncateTbl(String table) {
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String sql = "TRUNCATE TABLE " + table + ";";
            st.executeUpdate(sql);
            c.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }
     
        private void hasilSPK() {
        Object[] header = {"NO", "ALTERNATIF", "BOBOT"};
        Object[][] data = null;
        DefaultTableModel model = new DefaultTableModel(data, header);
        tblBobotku.setModel(model);

        int nomor = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            model.getDataVector().removeAllElements();
            String sql = "SELECT * FROM hasil ORDER BY hasil DESC";
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String id = rs.getString("id_hasil");
                String nama = rs.getString("nama");
                String hasil = rs.getString("hasil");

                nomor++;
                Object[] d = {nomor, nama, hasil};
                model.addRow(d);

            }
            c.close();
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }
}
